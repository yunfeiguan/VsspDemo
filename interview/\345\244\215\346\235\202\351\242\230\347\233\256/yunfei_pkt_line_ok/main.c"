#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define MAX_PACKAGE_SIZE 65520
#define MAX_PAYLOAD_SIZE 65516

char buffer[MAX_PACKAGE_SIZE] = {'0'};
char stop = 0;

void usage(char *proc)
{
	printf("Error: should pass 2 arguments at least!\n\n");
	printf("eg.\n"); 
	printf("    cat file.xx | %s <--decode | --encode> \n\n", proc);
}

void print_to_stdout(char *buf, int size)
{
	char c = '0';
	int i = 0;
	while((c =*(buf++)) != '\n' && i++ < size)
		printf("%c", c);
	if (c ==  '\n')
		printf("\n");
}

int readline2(char *line, int max_size)
{
	int c;
	int len = 0;
	while ((c = getc(stdin)) != '\n' && len < max_size) {
		if( EOF == c) {
			stop = 1;
			break;
		}
		line[len++] = c;
	}

	// empty line
	if (len == 0 && c == '\n')
		line[len++] = '\n';
	
	if(len >0 && len < max_size  && c != EOF)
		line[len++] = '\n';
	
	return len;
}

int str_len(char *line, int max_size)
{
	int c = 0;
	int len = 0;
	while ((c = *(line+len)) != '\n' && len < max_size) {
		if (EOF == c) {
			stop = 1;
			break;
		}
		len++;
	}

	//empty line
	if (len == 0 && c == '\n')
		len++;

	if(len >0 && len < max_size  && c != EOF)
		len++;

	return len;
}

void set_str_header(char *buf, int size)
{
    	 char hexchar[] = "0123456789abcdef";

	 for (int i = 0; i < 4; i++)
		 buf[i] = hexchar[(size >> 4*(4-i-1)) % 16];
}

int hexstr_to_length(char *hexstr) {
	char hexchar[] = "0123456789abcdef";

	
	int sum = 0, j = 0;
	for (int i = 0; i < 4; i++) {
		while (hexstr[i] != hexchar[j++]);
		sum |= (j-1) << 4*(4-i-1);
		j = 0;
	}

	return sum;
}
int pack(char *format_str, char *buf, int len)
{
	if (len == 1 && buf[0] == '\n') {
		printf("%s", buf);
		return 0;
	}

	set_str_header(format_str, len+4);
	memcpy(format_str+4, buf, len);
	print_to_stdout(format_str, len+4);
	return 0;
}

int encode(int argc, char **argv)
{
	int len = 0, i = 0;
	char format_str[MAX_PACKAGE_SIZE] = {'\0'};
	if (argc) {
		while(i < argc) {
			len = strlen(argv[i]);
			pack(format_str, argv[i], len);
			printf("\n");
			i++;
		}
	} else {
		while ((len = readline2(buffer, MAX_PAYLOAD_SIZE)) ) {
		        pack(format_str, buffer, len);
			fflush(stdout);
			memset(buffer, '\0', MAX_PAYLOAD_SIZE+1);
			
			if (stop)
				return 0;
		}
	}
	printf("0000");
	return 0;
}

int unpack(char  *format_str, char *buf)
{
        char head[5] = {'\0'};
	int len = 0;
	strncpy(head, buf, 4);

        // don't do any format for empty line
	if (buf[0] == '\n') {
		printf("%s", buf);
		return 0;
	}

	len = hexstr_to_length(head) - 4;
	if (strncmp(buf, "0004", 4) <= 0 && strncmp(buf, "0000", 4) > 0) {
		printf("ERR: invalid argment: %s", buf);
		return -1;
	}

	if (strncmp("0000", buf, 4) == 0) {
		//printf("0000 exit\n");
		return 0;
	}

	memcpy(format_str, buf+4, len);
	print_to_stdout(format_str, len);
	return 0;
}

int decode(int argc, char **argv)
{
	int len = 0, i = 0;
	char format_str[MAX_PACKAGE_SIZE] = {'\0'};
	if (argc) {
		while(i < argc) {
			unpack(format_str, argv[i]);
			printf("\n");
			i++;
		}
	} else {
		while ((len = readline2(buffer, MAX_PACKAGE_SIZE))) {
			if(unpack(format_str, buffer))
				return 0;
		    
			if (stop)
				return 0;
		}
	}
	return 0; 
}

int main(int argc, char **argv)
{
    if (argc < 2) {
	    usage(argv[0]);
	    return -1;
    }

    freopen(NULL, "rb", stdin);
    if (strcmp(argv[1],"--encode") == 0)
	    encode(argc-2, argv+2);
    else if (strcmp(argv[1], "--decode") == 0)
	    decode(argc-2, argv+2);
    else {      
	    printf("invalidate op type: %s\n", argv[1]);
	    usage(argv[1]);
	    return -1;
    }
    
    return 0;
}
